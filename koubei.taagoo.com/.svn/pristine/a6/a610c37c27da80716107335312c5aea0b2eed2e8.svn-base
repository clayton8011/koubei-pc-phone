<?php
namespace console\controllers;

use common\models\KoubeiServiceMarketOrder;
use Yii;
use yii\console\Controller;
use common\models\AliOpen;
use common\models\Category;
use common\models\CategoryRelation;
use common\models\Shop;
use common\models\Voucher;

class KoubeiShopController extends Controller
{
    //同步商圈店铺列表
    public function actionSyncShop()
    {
        $aop = AliOpen::getAopObj();
        $request = new \AlipayOfflineMarketShopSummaryBatchqueryRequest ();

        $list = KoubeiServiceMarketOrder::find()->all();
        foreach ($list as $item) {
            echo "koubei-service-market-order    id:" . $item->id . "\r\n";
            $page = 1;
            $b = true;
            while ($page) {
                echo "shop-list     page:" . $page . "\r\n";
                $request->setBizContent("{" .
                    "    \"op_role\":\"ISV\"," .
                    "    \"shop_id\":\"" . $item->shop_id . "\"," .
                    "    \"query_type\":\"MALL_RELATION\"," .
                    "    \"page_no\":" . $page . "," .
                    "    \"page_size\":50" .
                    "  }");
                $resultAccept = $aop->execute($request, '', $item->member->app_auth_token);
                $responseNode = str_replace(".", "_", $request->getApiMethodName()) . "_response";
                $resultCode = $resultAccept->$responseNode->code;
                if (!empty($resultCode) && $resultCode == 10000) {
//                    if($resultAccept->$responseNode->total_items==Shop::find()->where(['merchant_pid'=>$item->merchant_pid])->count()){
//                        break;
//                    }
                    if (isset($resultAccept->$responseNode->shop_summary_infos)) {
                        foreach ($resultAccept->$responseNode->shop_summary_infos as $shop) {

                            $shopModel = Shop::findOne($shop->shop_id);
                            if ($shopModel) {
                                $shopModel->scenario = 'update';
                            } else {
                                $shopModel = new Shop(['scenario' => 'create']);
                                $shopModel->shop_id = $shop->shop_id;
                            }
                            if ($shopModel->action_param) {
                                continue;
                            }
                            $shopModel->merchant_pid = $item->merchant_pid;
                            $shopModel->gmt_create = $shop->gmt_create;
                            $shopModel->status = $shop->status;
                            $shopModel->star = isset($shop->shop_comment_info->star) ? $shop->shop_comment_info->star : 0;
                            $shopModel->score = isset($shop->shop_comment_info->score) ? $shop->shop_comment_info->score : 0;
                            $shopModel->province_code = $shop->province_code;
                            $shopModel->city_code = $shop->city_code;
                            $shopModel->district_code = $shop->district_code;
                            $shopModel->pic_coll = $shop->pic_coll;
                            $shopModel->brand_name = $shop->brand_name;
                            $shopModel->main_image = $shop->main_image;
                            $shopModel->shop_type = $shop->shop_type;
                            $shopModel->main_shop_name = $shop->main_shop_name;
                            $shopModel->address = $shop->address;
                            $shopModel->longitude = $shop->longitude;
                            $shopModel->latitude = $shop->latitude;
                            $shopModel->branch_shop_name = isset($shop->branch_shop_name) ? $shop->branch_shop_name : '';
                            $shopModel->is_show = $shop->is_show;
                            $shopModel->created_at = time();
                            if ($shopModel->save()) {
                                $haveCategoryId = [];
                                foreach ($shop->category_infos as $category) {
                                    $categoryModel = Category::find()->where(['name'=>$category->category_name])->one();
                                    if(!$categoryModel){
                                        continue;
                                    }
//                                    if (!$categoryModel) {
//                                        $categoryModel = new Category(['scenario' => 'create']);
//                                    } else {
//                                        $categoryModel->scenario = 'update';
//                                    }
//                                    $categoryModel->id = $category->category_id;
//                                    $categoryModel->name = $category->category_name;
//                                    $categoryModel->level = $category->category_level;
//                                    if(!$categoryModel->save()){
//                                        Yii::error($categoryModel);
//                                    }
                                    if ($categoryModel->id) {
                                        $categoryRelation = CategoryRelation::find()->where(['category_id' => $categoryModel->id, 'shop_id' => $shop->shop_id])->count();
                                        if (!$categoryRelation) {
                                            $categoryRelationModel = new CategoryRelation(['scenario' => 'create']);
                                            $categoryRelationModel->category_id = $categoryModel->id;
                                            $categoryRelationModel->shop_id = $shop->shop_id;
                                            if (!$categoryRelationModel->save()) {
                                                Yii::error($categoryRelationModel);
                                            }
                                        }
                                        $haveCategoryId[] = $categoryModel->id;
                                    } else {
                                        Yii::error($categoryModel);
                                    }
                                }
                                if ($haveCategoryId) {
                                    CategoryRelation::deleteAll(['AND',
                                        'shop_id = ' . $shop->shop_id,
                                        ['NOT IN', 'category_id', $haveCategoryId]
                                    ]);
                                }
                            } else {
                                Yii::error($shopModel);
                            }
                        }
                    }
                    $page++;
                    if ($resultAccept->$responseNode->total_page_no < $page) {
                        echo "error 111\r\n";
                        break;
                    }
                    sleep(5);
                } else {
                    echo "error 222\r\n";
                    continue;
                }
            }
        }

    }


    //店铺促销信息
    public function actionSyncShopPromoinfo()
    {
        $aop = AliOpen::getAopObj();
        $list = KoubeiServiceMarketOrder::find()->all();
        foreach ($list as $item) {
            $promoInfoRequest = new \KoubeiMarketingMallShoppromoinfoQueryRequest ();

            $count = Shop::find()->where(['merchant_pid' => $item->merchant_pid])->count();
            $pageOnePage = 50;
            $page = 1;
            while (true) {
                $limit = ($page - 1) * $pageOnePage;
                $data = Shop::find()->where(['merchant_pid' => $item->merchant_pid])->orderBy('shop_id asc')->limit($pageOnePage)->offset($limit)->all();
                $page++;
                if ($data) {
                    $shopIds = [];
                    foreach ($data as $shopOne) {
                        $shopIds[] = '"'.$shopOne->shop_id.'"';
                    }

                    if ($shopIds) {
                        $promoInfoRequest->setBizContent("{" . "\"mall_id\":\"" . $item->shop_id . "\"," .
                            " \"shop_ids\":[" .
                            implode(',',$shopIds).
                            " ]" .
                            " }");
                        $promoInfoResult = $aop->execute($promoInfoRequest, '', $item->member->app_auth_token);
                        $promoInfoResponseNode = str_replace(".", "_", $promoInfoRequest->getApiMethodName()) . "_response";
                        $promoInfoResultCode = $promoInfoResult->$promoInfoResponseNode->code;
                        if (!empty($promoInfoResultCode) && $promoInfoResultCode == 10000) {
                            if (isset($promoInfoResult->$promoInfoResponseNode->shop_promo_infos)) {
                                echo 'promo_infos ok'."\r\n";
                                foreach ($promoInfoResult->$promoInfoResponseNode->shop_promo_infos as $promoInfo) {
                                    $shopModel = Shop::findOne($promoInfo->shop_id);
                                    if ($shopModel) {
                                        $shopModel->scenario = 'update';
                                    }else{
                                        continue;
                                    }
                                    $shopModel->price_average = isset($promoInfo->price_average) ? $promoInfo->price_average : '';
                                    $shopModel->cuisine = isset($promoInfo->cuisine) ? $promoInfo->cuisine : '';
                                    $shopModel->shop_name = isset($promoInfo->shop_name) ? $promoInfo->shop_name : '';
                                    $shopModel->shop_logo_url = isset($promoInfo->shop_logo_url) ? $promoInfo->shop_logo_url : '';
                                    $shopModel->city_id = isset($promoInfo->city_id) ? $promoInfo->city_id : '';
                                    $shopModel->popularity_level = isset($promoInfo->popularity_level) ? $promoInfo->popularity_level : '';
                                    $shopModel->shop_recommend_one_tag_compose = isset($promoInfo->shop_recommend_one_tag_compose) ? $promoInfo->shop_recommend_one_tag_compose : '';
                                    $shopModel->head_shop_name = isset($promoInfo->head_shop_name) ? $promoInfo->head_shop_name : '';
                                    $shopModel->popularity = isset($promoInfo->popularity) ? $promoInfo->popularity : '';
                                    $shopModel->action_param = isset($promoInfo->action_param) ? $promoInfo->action_param : '';
                                    if(!$shopModel->save()){
                                        Yii::error($shopModel);
                                    }
                                    if (isset($promoInfo->voucher_info_list)) {
                                        echo 'voucher_ok'."\r\n";
                                        foreach ($promoInfo->voucher_info_list as $voucher) {
                                            $voucherModel = Voucher::findOne($voucher->item_id);
                                            if (!$voucherModel) {
                                                $voucherModel = new Voucher(['scenario' => 'create']);
                                                $voucherModel->item_id = $voucher->item_id;
                                            } else {
                                                $voucherModel->scenario = 'update';
                                            }
                                            $voucherModel->voucher_type = $voucher->voucher_type;
                                            $voucherModel->shop_name = $voucher->shop_name;
                                            $voucherModel->voucher_detail_url = $voucher->voucher_detail_url;
                                            $voucherModel->item_name = $voucher->item_name;
                                            $voucherModel->item_logo = isset($voucher->item_logo) ? $voucher->item_logo : '';
                                            $voucherModel->shop_id = $voucher->shop_id;
                                            $voucherModel->mall_id = $item->shop_id;
                                            if (!$voucherModel->save()) {
                                                Yii::error($voucherModel);
                                            }
                                        }
                                    }

                                }
                            }
                        } else {
                            var_dump($promoInfoResult);
                            echo "error 333\r\n";
                        }
                    }
                } else {
                    break;
                }
            }


        }

    }


    /**
     * 分类
     */
    public function actionCategoryPut(){
        $str = '美食,中餐,川菜,2015050700000010,
,,湘菜,2015050700000011,
,,湖北菜,2015050700000012,
,,台湾菜,2015050700000013,
,,新疆菜,2015050700000014,
,,江浙菜,2015050700000015,
,,云南菜,2015050700000016,
,,贵州菜,2015050700000017,
,,西北菜,2015050700000018,
,,东北菜,2015050700000019,
,,香锅/烤鱼,2015050700000020,
,,海鲜,2015050700000021,
,,其它地方菜,2015050700000022,
,,粤菜,2015052200000062,
,,海南菜,2016010600120962,
,,鲁菜,2016031800152626,
,,徽菜,2016031800154367,
,,晋菜,2016031800154368,
,,豫菜,2016031800155597,
,,闽菜,2016031800156722,
,,上海本帮菜,2016031800158042,
,,淮扬菜,2016031800159500,
,火锅,麻辣烫/串串香,2015050700000023,
,,川味/重庆火锅,2015050700000024,
,,云南火锅,2015050700000025,
,,老北京涮羊肉,2015050700000026,
,,港式火锅,2015050700000027,
,,鱼火锅,2015050700000028,
,,羊蝎子,2015050700000029,
,,炭火锅,2015050700000030,
,,韩式火锅,2015050700000031,
,,豆捞,2015050700000032,
,,其它火锅,2015050700000033,
,烧烤,中式烧烤,2015050700000048,
,,拉美烧烤,2015050700000049,
,,日式烧烤,2015050700000050,
,,铁板烧,2015050700000051,
,,韩式烧烤,2015050700000052,
,,其它烧烤,2015061690000026,
,其他美食,自助餐,2015050700000056,
,,创意菜,2015050700000057,
,,西餐,2015050700000058,
,,日韩料理,2015050700000059,
,,东南亚菜,2015050700000060,
,,素食,2015050700000061,
,,其他餐饮美食,2015061690000027,
,,清真菜,2016031800159501,
,,茶餐厅,2016031800160959,
,,土菜/农家菜,2016031800162476,
,,采摘/农家乐,2016070500193665,
,汤/粥/煲/砂锅/炖菜,粥,2015050700000053,
,,汤,2015050700000054,
,,砂锅/煲类/炖菜,2015050700000055,
,,其它,2015061690000025,
,快餐,西式快餐,2015050700000038,
,,中式快餐,2015050700000039,
,,其它快餐,2015061690000030,
,休闲食品,零食,2015050700000040,
,,生鲜水果,2015050700000041,
,,其它休闲食品,2015061690000029,
,,美食特产,2016062900190066,
,小吃,熟食,2015050700000034,
,,面点,2015050700000035,
,,米粉/米线,2015050700000036,
,,其它小吃,2015050700000037,
,休闲茶饮,咖啡,2015050700000042,
,,奶茶,2015050700000043,
,,冰激凌,2015050700000045,
,,饮品/甜点,2015050700000047,
,,咖啡厅,2015062600011157,
,,酒吧,2015091100061275,
,烘焙糕点,蛋糕,2015050700000044,
,,面包,2015050700000046,
,,其它烘焙糕点,2015061690000028,
超市便利店,超市,——,2015091000058486,
,个人护理,——,2015091000056956,
,便利店,——,2015091000060134,
,烟酒杂货,——,2016062800188784,
,自动售卖机,——,2016070600196537,
,综合特产,——,2016112300215970,
K歌,KTV,量贩式KTV,2015090700042466,
,,会所型KTV,2016042200000058,
,录音棚,——,2016062900190067,
,迷你KTV,,2017011600228484,
,中医养生,——,2015063000012448,
,足疗按摩,——,2015090700039570,
,洗浴/桑拿会所,——,2016012000122673,
,网吧网咖,——,2016012000124191,
,动物园/游乐园,动植物园,2017011600218458,
,,海洋馆,2017011600219733,
,,游乐园,2017011600221273,
,游乐游乐,——,2016012000126089,
,手工DIY,——,2017011600222970,
,图书馆,——,2016012000127534,
,密室,——,2016012000128641,
,桌面游戏,——,2016012000129781,
,cs拓展,——,2016012000130831,
,文化艺术,博物馆,2017021700231831,
,,美术馆,2017021700233507,
,,科技馆,2017021700234543,
,,蜡像馆,2017021700235769,
美发/美容/美甲,美甲/手护,——,2015063000017354,
,SPA/美容/美体,——,2015063000019130,
,美容美发,——,2015101000066113,
,美容美甲,——,2015101000064159,
,美发美甲,——,2015101000067631,
,美发,——,2015063000015529,
,彩妆造型,——,2016062900190068,
,美睫,——,2016062900190069,
,产后塑形,——,2016062900190070,
,纹绣,——,2016062900190071,
,纹身,——,2016062900190072,
,祛痘,——,2016081100207105,
,整形,——,2016062900190302,
运动健身,篮球场,——,2015110500074890,
,舞蹈,——,2015110500083341,
,网球场,——,2015110500077463,
,乒乓球馆,——,2015110500077464,
,游泳馆,——,2015110500078657,
,羽毛球馆,——,2015110500073009,
,桌球馆,——,2015110500078658,
,瑜伽,——,2015110500078659,
,足球场,——,2015110500075901,
,武术场馆,——,2015110500085004,
,溜冰场,——,2016012900151604,
,保龄球馆,——,2016051600179926,
,壁球场,——,2016051600183429,
,排球场,——,2016051600181795,
,高尔夫球场,——,2016051600179925,
,体育场馆,——,2016051600178152,
,健身中心,——,2015110500080520,
,射箭,——,2017011600224837,
,马术,——,2017011600222971,
,滑雪,——,2017011600227260,
宠物,宠物店,——,2016012900148581,
,宠物医院,——,2016012900149738,
结婚,婚礼策划,——,2016012900138987,
,婚纱/礼服,——,2016012900140916,
,婚车租赁,——,2016062900190078,
摄影,婚纱摄影,全球旅拍,2016070700195434,
,,本地婚纱摄影,2016070700195435,
,儿童摄影,——,2016012900145271,
,孕妇摄影,——,2016051000164227,
,艺术写真,——,2015063000024698,
,跟拍,——,2016051600176301,
,证件照,——,2016051000165495,
,商业摄影,——,2016063000191709,
亲子,亲子游玩,——,2016012900143707,
,亲子游泳,——,2016051000164228,
,科普场馆,——,2016051000167013,
,亲子DIY,——,2016051000168501,
,早教中心,——,2016051000170050,
,少儿外语,——,2016051000165496,
,少儿才艺,——,2016051000171940,
,亲子服务,——,2016062900190080,
,产后恢复,——,2016102600209503,
,月子服务,——,2016102600211467,
,小儿推拿,——,2017011600224836,
,少儿运动,——,2017011600226164,
洗衣,洗衣家纺,——,2016051000173119,
,鞋帽清洗,——,2016051000171941,
,奢侈品养护,——,2016051000165497,
,自助洗衣,——,2016062900190081,
书店,——,——,2016051000175109,';
        Category::deleteAll();
        $arr = explode("\n",$str);
        $preInfo = [];
        $first = '';
        $second = '';
        $id = 0;
        foreach($arr as $line){
            $id++;
            $categoryArr = explode(',',$line);

            if($categoryArr[0]){
                $first = $categoryArr[0];
                $firstModel = Category::find()->where(['name'=>$first])->one();
                if(!$firstModel){
                    $firstModel = new Category(['scenario' => 'create']);
                    $firstModel->name=$first;
                    $firstModel->level='1';
                    $firstModel->pid=0;
                    $firstModel->created_at=time();
                    $firstModel->save();
                }
            }
            $id++;
            if($firstModel){
                if(isset($categoryArr[1]) && $categoryArr[1]){
                    $second = $categoryArr[1];
                    $secondModel = Category::find()->where(['name'=>$second])->one();
                    if(!$secondModel) {
                        $secondModel = new Category(['scenario' => 'create']);
                        $secondModel->name = $second;
                        $secondModel->level = '2';
                        $secondModel->pid = $firstModel->id;
                        $secondModel->created_at = time();
                        $secondModel->save();
                    }
                }

                if($secondModel){
                    if(isset($categoryArr[3]) && $categoryArr[3] && is_numeric($categoryArr[3])){
                        $thirdModel = Category::find()->where(['id'=>$categoryArr[3]])->one();
                        if(!$thirdModel){
                            $thirdModel = new Category(['scenario' => 'create']);
                            $thirdModel->koubei_id=$categoryArr[3];
                            $thirdModel->name=$categoryArr[2];
                            $thirdModel->level='3';
                            $thirdModel->pid=$secondModel->id;
                            $thirdModel->created_at=time();
                            $thirdModel->save();
                        }
                    }
                }
            }
        }
    }
}
